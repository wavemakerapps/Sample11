/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.sample11.services.test;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.7.11
 * 2017-12-11T13:23:37.529Z
 * Generated source version: 2.7.11
 * 
 */
@WebServiceClient(name = "ConnectPoint_Reservation", 
                  wsdlLocation = "Test.wsdl",
                  targetNamespace = "http://tempuri.org/") 
public class ConnectPointReservation extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://tempuri.org/", "ConnectPoint_Reservation");
    public final static QName BasicHttpBindingIConnectPointReservation = new QName("http://tempuri.org/", "BasicHttpBinding_IConnectPoint_Reservation");
    static {
        URL url = ConnectPointReservation.class.getResource("Test.wsdl");
        if (url == null) {
            url = ConnectPointReservation.class.getClassLoader().getResource("Test.wsdl");
        } 
        if (url == null) {
            java.util.logging.Logger.getLogger(ConnectPointReservation.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "Test.wsdl");
        }       
        WSDL_LOCATION = url;
    }

    public ConnectPointReservation(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public ConnectPointReservation(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ConnectPointReservation() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public ConnectPointReservation(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public ConnectPointReservation(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public ConnectPointReservation(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns IConnectPointReservation
     */
    @WebEndpoint(name = "BasicHttpBinding_IConnectPoint_Reservation")
    public IConnectPointReservation getBasicHttpBindingIConnectPointReservation() {
        return super.getPort(BasicHttpBindingIConnectPointReservation, IConnectPointReservation.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns IConnectPointReservation
     */
    @WebEndpoint(name = "BasicHttpBinding_IConnectPoint_Reservation")
    public IConnectPointReservation getBasicHttpBindingIConnectPointReservation(WebServiceFeature... features) {
        return super.getPort(BasicHttpBindingIConnectPointReservation, IConnectPointReservation.class, features);
    }

}
