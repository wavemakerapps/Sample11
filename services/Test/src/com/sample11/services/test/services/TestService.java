/**This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

package com.sample11.services.test.services;
import com.sample11.services.test.*;
import java.util.List;

import com.wavemaker.runtime.soap.util.SoapSettingsResolver;
import com.wavemaker.runtime.soap.SoapServiceSettings;

import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import javax.xml.ws.BindingProvider;



@Service
public class TestService{

    @Autowired
    @Qualifier("TestSoapServiceSettings")
    private SoapServiceSettings soapServiceSettings;


	public com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.ModifyPNRResponse modifyPNR(  com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.ModifyPNR parameters )
	          {
 	    ConnectPointReservation connectpointreservation = new ConnectPointReservation();
 IConnectPointReservation iconnectpointreservation = connectpointreservation.getBasicHttpBindingIConnectPointReservation();
 SoapSettingsResolver.setBindingProperties((BindingProvider)iconnectpointreservation, soapServiceSettings);
 return iconnectpointreservation.modifyPNR(parameters );
	}

	public com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.EvaluateModificationOfPNRResponse evaluateModificationOfPNR(  com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.EvaluateModificationOfPNR parameters )
	          {
 	    ConnectPointReservation connectpointreservation = new ConnectPointReservation();
 IConnectPointReservation iconnectpointreservation = connectpointreservation.getBasicHttpBindingIConnectPointReservation();
 SoapSettingsResolver.setBindingProperties((BindingProvider)iconnectpointreservation, soapServiceSettings);
 return iconnectpointreservation.evaluateModificationOfPNR(parameters );
	}

	public com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.AddPenaltiesResponse addPenalties(  com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.AddPenalties parameters )
	          {
 	    ConnectPointReservation connectpointreservation = new ConnectPointReservation();
 IConnectPointReservation iconnectpointreservation = connectpointreservation.getBasicHttpBindingIConnectPointReservation();
 SoapSettingsResolver.setBindingProperties((BindingProvider)iconnectpointreservation, soapServiceSettings);
 return iconnectpointreservation.addPenalties(parameters );
	}

	public com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.AddTaxesResponse addTaxes(  com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.AddTaxes parameters )
	          {
 	    ConnectPointReservation connectpointreservation = new ConnectPointReservation();
 IConnectPointReservation iconnectpointreservation = connectpointreservation.getBasicHttpBindingIConnectPointReservation();
 SoapSettingsResolver.setBindingProperties((BindingProvider)iconnectpointreservation, soapServiceSettings);
 return iconnectpointreservation.addTaxes(parameters );
	}

	public com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.OverrideReservationChargesResponse overrideReservationCharges(  com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.OverrideReservationCharges parameters )
	          {
 	    ConnectPointReservation connectpointreservation = new ConnectPointReservation();
 IConnectPointReservation iconnectpointreservation = connectpointreservation.getBasicHttpBindingIConnectPointReservation();
 SoapSettingsResolver.setBindingProperties((BindingProvider)iconnectpointreservation, soapServiceSettings);
 return iconnectpointreservation.overrideReservationCharges(parameters );
	}

	public com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.CreatePNRExtResponse createPNRExt(  com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.CreatePNRExt parameters )
	          {
 	    ConnectPointReservation connectpointreservation = new ConnectPointReservation();
 IConnectPointReservation iconnectpointreservation = connectpointreservation.getBasicHttpBindingIConnectPointReservation();
 SoapSettingsResolver.setBindingProperties((BindingProvider)iconnectpointreservation, soapServiceSettings);
 return iconnectpointreservation.createPNRExt(parameters );
	}

	public com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.CancelPNRFFPAllTaxesResponse cancelPNRFFPAllTaxes(  com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.CancelPNRFFPAllTaxes parameters )
	          {
 	    ConnectPointReservation connectpointreservation = new ConnectPointReservation();
 IConnectPointReservation iconnectpointreservation = connectpointreservation.getBasicHttpBindingIConnectPointReservation();
 SoapSettingsResolver.setBindingProperties((BindingProvider)iconnectpointreservation, soapServiceSettings);
 return iconnectpointreservation.cancelPNRFFPAllTaxes(parameters );
	}

	public com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.RetrievePNRResponse retrievePNR(  com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.RetrievePNR parameters )
	          {
 	    ConnectPointReservation connectpointreservation = new ConnectPointReservation();
 IConnectPointReservation iconnectpointreservation = connectpointreservation.getBasicHttpBindingIConnectPointReservation();
 SoapSettingsResolver.setBindingProperties((BindingProvider)iconnectpointreservation, soapServiceSettings);
 return iconnectpointreservation.retrievePNR(parameters );
	}

	public com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.GetReservationResponse getReservation(  com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.GetReservation parameters )
	          {
 	    ConnectPointReservation connectpointreservation = new ConnectPointReservation();
 IConnectPointReservation iconnectpointreservation = connectpointreservation.getBasicHttpBindingIConnectPointReservation();
 SoapSettingsResolver.setBindingProperties((BindingProvider)iconnectpointreservation, soapServiceSettings);
 return iconnectpointreservation.getReservation(parameters );
	}

	public com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.GetApisInfoResponse getApisInfo(  com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.GetApisInfo parameters )
	          {
 	    ConnectPointReservation connectpointreservation = new ConnectPointReservation();
 IConnectPointReservation iconnectpointreservation = connectpointreservation.getBasicHttpBindingIConnectPointReservation();
 SoapSettingsResolver.setBindingProperties((BindingProvider)iconnectpointreservation, soapServiceSettings);
 return iconnectpointreservation.getApisInfo(parameters );
	}

	public com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.CreatePNRFFPResponse createPNRFFP(  com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.CreatePNRFFP parameters )
	          {
 	    ConnectPointReservation connectpointreservation = new ConnectPointReservation();
 IConnectPointReservation iconnectpointreservation = connectpointreservation.getBasicHttpBindingIConnectPointReservation();
 SoapSettingsResolver.setBindingProperties((BindingProvider)iconnectpointreservation, soapServiceSettings);
 return iconnectpointreservation.createPNRFFP(parameters );
	}

	public com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.ModifyPNRFFPResponse modifyPNRFFP(  com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.ModifyPNRFFP parameters )
	          {
 	    ConnectPointReservation connectpointreservation = new ConnectPointReservation();
 IConnectPointReservation iconnectpointreservation = connectpointreservation.getBasicHttpBindingIConnectPointReservation();
 SoapSettingsResolver.setBindingProperties((BindingProvider)iconnectpointreservation, soapServiceSettings);
 return iconnectpointreservation.modifyPNRFFP(parameters );
	}

	public com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.CancelPNRFFPResponse cancelPNRFFP(  com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.CancelPNRFFP parameters )
	          {
 	    ConnectPointReservation connectpointreservation = new ConnectPointReservation();
 IConnectPointReservation iconnectpointreservation = connectpointreservation.getBasicHttpBindingIConnectPointReservation();
 SoapSettingsResolver.setBindingProperties((BindingProvider)iconnectpointreservation, soapServiceSettings);
 return iconnectpointreservation.cancelPNRFFP(parameters );
	}

	public com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.SummaryPNRResponse summaryPNR(  com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.SummaryPNR parameters )
	          {
 	    ConnectPointReservation connectpointreservation = new ConnectPointReservation();
 IConnectPointReservation iconnectpointreservation = connectpointreservation.getBasicHttpBindingIConnectPointReservation();
 SoapSettingsResolver.setBindingProperties((BindingProvider)iconnectpointreservation, soapServiceSettings);
 return iconnectpointreservation.summaryPNR(parameters );
	}

	public com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.HoldInventoryResponse holdInventory(  com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.HoldInventory parameters )
	          {
 	    ConnectPointReservation connectpointreservation = new ConnectPointReservation();
 IConnectPointReservation iconnectpointreservation = connectpointreservation.getBasicHttpBindingIConnectPointReservation();
 SoapSettingsResolver.setBindingProperties((BindingProvider)iconnectpointreservation, soapServiceSettings);
 return iconnectpointreservation.holdInventory(parameters );
	}

	public com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.GetReservationBalanceResponse getReservationBalance(  com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.GetReservationBalance parameters )
	          {
 	    ConnectPointReservation connectpointreservation = new ConnectPointReservation();
 IConnectPointReservation iconnectpointreservation = connectpointreservation.getBasicHttpBindingIConnectPointReservation();
 SoapSettingsResolver.setBindingProperties((BindingProvider)iconnectpointreservation, soapServiceSettings);
 return iconnectpointreservation.getReservationBalance(parameters );
	}

	public com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.HistoryPNRResponse historyPNR(  com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.HistoryPNR parameters )
	          {
 	    ConnectPointReservation connectpointreservation = new ConnectPointReservation();
 IConnectPointReservation iconnectpointreservation = connectpointreservation.getBasicHttpBindingIConnectPointReservation();
 SoapSettingsResolver.setBindingProperties((BindingProvider)iconnectpointreservation, soapServiceSettings);
 return iconnectpointreservation.historyPNR(parameters );
	}

	public com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.SummaryPNRExtResponse summaryPNRExt(  com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.SummaryPNRExt parameters )
	          {
 	    ConnectPointReservation connectpointreservation = new ConnectPointReservation();
 IConnectPointReservation iconnectpointreservation = connectpointreservation.getBasicHttpBindingIConnectPointReservation();
 SoapSettingsResolver.setBindingProperties((BindingProvider)iconnectpointreservation, soapServiceSettings);
 return iconnectpointreservation.summaryPNRExt(parameters );
	}

	public com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.CancelPNRResponse cancelPNR(  com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.CancelPNR parameters )
	          {
 	    ConnectPointReservation connectpointreservation = new ConnectPointReservation();
 IConnectPointReservation iconnectpointreservation = connectpointreservation.getBasicHttpBindingIConnectPointReservation();
 SoapSettingsResolver.setBindingProperties((BindingProvider)iconnectpointreservation, soapServiceSettings);
 return iconnectpointreservation.cancelPNR(parameters );
	}

	public com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.ReleaseInventoryResponse releaseInventory(  com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.ReleaseInventory parameters )
	          {
 	    ConnectPointReservation connectpointreservation = new ConnectPointReservation();
 IConnectPointReservation iconnectpointreservation = connectpointreservation.getBasicHttpBindingIConnectPointReservation();
 SoapSettingsResolver.setBindingProperties((BindingProvider)iconnectpointreservation, soapServiceSettings);
 return iconnectpointreservation.releaseInventory(parameters );
	}

	public com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.OverBookResponse overBook(  com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.OverBook parameters )
	          {
 	    ConnectPointReservation connectpointreservation = new ConnectPointReservation();
 IConnectPointReservation iconnectpointreservation = connectpointreservation.getBasicHttpBindingIConnectPointReservation();
 SoapSettingsResolver.setBindingProperties((BindingProvider)iconnectpointreservation, soapServiceSettings);
 return iconnectpointreservation.overBook(parameters );
	}

	public com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.SetApisInfoResponse setApisInfo(  com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.SetApisInfo parameters )
	          {
 	    ConnectPointReservation connectpointreservation = new ConnectPointReservation();
 IConnectPointReservation iconnectpointreservation = connectpointreservation.getBasicHttpBindingIConnectPointReservation();
 SoapSettingsResolver.setBindingProperties((BindingProvider)iconnectpointreservation, soapServiceSettings);
 return iconnectpointreservation.setApisInfo(parameters );
	}

	public com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.CreatePNRResponse createPNR(  com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.CreatePNR parameters )
	          {
 	    ConnectPointReservation connectpointreservation = new ConnectPointReservation();
 IConnectPointReservation iconnectpointreservation = connectpointreservation.getBasicHttpBindingIConnectPointReservation();
 SoapSettingsResolver.setBindingProperties((BindingProvider)iconnectpointreservation, soapServiceSettings);
 return iconnectpointreservation.createPNR(parameters );
	}

	public com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.CancelPNRFFPAutoCancelResponse cancelPNRFFPAutoCancel(  com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.CancelPNRFFPAutoCancel parameters )
	          {
 	    ConnectPointReservation connectpointreservation = new ConnectPointReservation();
 IConnectPointReservation iconnectpointreservation = connectpointreservation.getBasicHttpBindingIConnectPointReservation();
 SoapSettingsResolver.setBindingProperties((BindingProvider)iconnectpointreservation, soapServiceSettings);
 return iconnectpointreservation.cancelPNRFFPAutoCancel(parameters );
	}

	public com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.ImportPNRResponse importPNR(  com.gzipcompressiontest.services.connectpoint_reservation.model.tempuri.ImportPNR parameters )
	          {
 	    ConnectPointReservation connectpointreservation = new ConnectPointReservation();
 IConnectPointReservation iconnectpointreservation = connectpointreservation.getBasicHttpBindingIConnectPointReservation();
 SoapSettingsResolver.setBindingProperties((BindingProvider)iconnectpointreservation, soapServiceSettings);
 return iconnectpointreservation.importPNR(parameters );
	}
}
